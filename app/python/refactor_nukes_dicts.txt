Combine 
self.current_person_parents, self.current_person_alt_parents, self.progeny_dicts into one master collection `self.family_data`.

self.family_data is a list of lists and the inner list is a list of dicts. self.family_data is structured like this:
	self.family_data = [[parents & alt parents],[partners & children]]
The parents & alt parents area has a sub-list for each set of parents, with the biological parents in sub-list 0 and the other sub-lists sorted by any relevant date such as a correlated alt-parent event (adoption etc). Each set of parents consists of three dicts. Dict 0 has fpid and finding id. Dict 1 describes the label and input on the left. Dict 2 describes the label and input on the right. Biological parents are gridded left for father and right for mother. Alt parents are gridded where the user inputs them, without regard for gender. Since the father and mother labels and inputs exists even if blank, the three dicts exist even if blank, but alt parent labels and inputs don't exist until needed, so there are no blank dictionaries for them. The person_id1 and person_id2 fields in the database table `persons_persons` has all biological fathers recorded as person_id1 and all biological mothers recorded as person_id2. 

The existence of partners is based on the existence of marital events or children. The partners and children area is sorted by any marital event that can be used, and if none is available, by the birth date of the oldest child. The children of a partner are sorted by birth date.

self.family_data = [
	[
		[
			{'fpid': None, 'finding': None, 'sorter': [0, 0, 0]}, 
			{'id': None, 'name': '', 'labtext': 'father', 'labwidg': None, 'inwidg': None}, 
			{'id': None, 'name': '', 'labtext': 'mother', 'labwidg': None, 'inwidg': None}
		],
	],

	{0: {
			'sorter': [0, 0, 0], 
			'partner_name': '', 
			'parent_type': '', 
			'partner_kin_type': '', 
			'inwidg': None, 
			'children': [
				{
					'fpid': None, 
					'birth_id': None, 
					'order': '1-2', 
					'gender': 'unknown', 
					'birth': '', 
					'sorter': [0, 0, 0], 
					'death': '', 
					'name': '', 
					'child_id': None, 
					'name_widg': None, 
					'gender_widg': None, 
					'birth_widg': None, 
					'death_widg': None}], 
			'marital_events': [
				{
					'fpid': None, 
					'finding': None}, 
				{
					'fpid': None, 
					'finding': None}
				]
		}
		}
]

LITERAL VERSION FOR REAL CODE:
for each partner there's a partner_id inside the sublist index 1 of self.family_data, like this: 
			{
			'sorter': [0, 0, 0], 
			'partner_name': '', 
			'parent_type': '', 
			'partner_kin_type': '', 
			'inwidg': None, 
			'children': [], 
			'marital_events': [
				{
					'fpid': None, 
					'finding': None}, 
				{
					'fpid': None, 
					'finding': None}
				]
			}

for each child there's a dict inside the 'children' sublist like this:
				{
					'fpid': None, 
					'birth_id': None, 
					'order': '1-2', 
					'gender': 'unknown', 
					'birth': '', 
					'sorter': [0, 0, 0], 
					'death': '', 
					'name': '', 
					'child_id': None, 
					'name_widg': None, 
					'gender_widg': None, 
					'birth_widg': None, 
					'death_widg': None
				}
This is the empty dict inside __init__:
self.family_data = [
	[
		[
			{'fpid': None, 'finding': None, 'sorter': [0, 0, 0]}, 
			{'id': None, 'name': '', 'labtext': 'father', 'labwidg': None, 'inwidg': None}, 
			{'id': None, 'name': '', 'labtext': 'mother', 'labwidg': None, 'inwidg': None}
		],
	],

	{},
]

OLD VERSION EXAMPLES:

line 646 self.current_person_parents: [[None, 1091], {'id': None, 'name': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.ma>}, {'id': None, 'name': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.pa>}]


line 647 self.current_person_alt_parents: [[[139, 1097, ['adoptive father', 'adoptive mother']], {'id': 5843, 'name': 'Raphael Fish', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_l0>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label3>}, {'id': None, 'name': None, 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_r0>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label4>}]]

line 648 self.progeny_dicts: {5817: {'sorter': [0, 0, 0], 'partner_name': 'Fredrick Calvin Dowd', 'parent_type': 'Father', 'partner_kin_type': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame.pard_5817_1>, 'children': [{'findings_persons_id': 138, 'birth_id': 681, 'order': '1-2', 'gender': 'male', 'birth': '', 'sorter': [0, 0, 0], 'death': '', 'name': 'Emilio Gerard Frantz', 'id': 295, 'name_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto>, 'gender_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto2>, 'birth_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto3>, 'death_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto4>}], 'marital_events': []}}



line 646 self.current_person_parents: [[None, 1091], {'id': None, 'name': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.ma>}, {'id': None, 'name': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.pa>}]
line 647 self.current_person_alt_parents: [[[139, 1097, ['adoptive father', 'adoptive mother']], {'id': 5843, 'name': 'Raphael Fish', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_l0>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label3>}, {'id': None, 'name': None, 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_r0>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label4>}]]
line 648 self.progeny_dicts: {5817: {'sorter': [0, 0, 0], 'partner_name': 'Fredrick Calvin Dowd', 'parent_type': 'Father', 'partner_kin_type': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame.pard_5817_1>, 'children': [{'findings_persons_id': 138, 'birth_id': 681, 'order': '1-2', 'gender': 'male', 'birth': '', 'sorter': [0, 0, 0], 'death': '', 'name': 'Emilio Gerard Frantz', 'id': 295, 'name_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto>, 'gender_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto2>, 'birth_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto3>, 'death_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame2.!entryauto4>}], 'marital_events': []}}
line 908 self.current_person_alt_parents: [[[114, 1070, ['foster father', 'foster mother']], {'id': None, 'name': None, 'widget': None, 'label': None}, {'id': None, 'name': None, 'widget': None, 'label': None}], [[113, 1069, ['adoptive father', 'adoptive mother']], {'id': None, 'name': None, 'widget': None, 'label': None}, {'id': None, 'name': None, 'widget': None, 'label': None}]]
line 951 lst: [44, 5806, 122, 5805, 121]
line 978 self.current_person_alt_parents: [[[114, 1070, ['foster father', 'foster mother']], {'id': 5806, 'name': 'Lucien Patrick Mejia', 'widget': None, 'label': None}, {'id': 5805, 'name': None, 'widget': None, 'label': None}], [[113, 1069, ['adoptive father', 'adoptive mother']], {'id': None, 'name': None, 'widget': None, 'label': None}, {'id': None, 'name': None, 'widget': None, 'label': None}]]
line 951 lst: [43, 5807, 112, 5808, 111]
line 978 self.current_person_alt_parents: [[[114, 1070, ['foster father', 'foster mother']], {'id': 5806, 'name': 'Lucien Patrick Mejia', 'widget': None, 'label': None}, {'id': 5805, 'name': 'Erlinda Rickard', 'widget': None, 'label': None}], [[113, 1069, ['adoptive father', 'adoptive mother']], {'id': 5807, 'name': 'Asa Jaime Legault', 'widget': None, 'label': None}, {'id': 5808, 'name': None, 'widget': None, 'label': None}]]
line 1109 births: [(93, 668, 12, 2, 5635, 1), (96, 671, 12, 2, None, 1), (95, 872, None, 1, 12, 2)]
line 1172 parent_type: 1
line 1172 parent_type: 1
line 1181 parent_type: 1
line 1211 self.progeny_dicts: {6: {'sorter': [1905, 0, 0], 'partner_name': 'Ronnie Webb', 'parent_type': '', 'partner_kin_type': 'wife', 'widget': None, 'children': [], 'marital_events': [{'findings_persons_id': 72, 'finding': 646}, {'findings_persons_id': 73, 'finding': 649}]}, 5599: {'sorter': [1910, 8, 15], 'partner_name': 'Selina Savoy', 'parent_type': '', 'partner_kin_type': 'wife', 'widget': None, 'children': [], 'marital_events': [{'findings_persons_id': 69, 'finding': 632}]}, 5635: {'sorter': [1920, 0, 0], 'partner_name': 'Harmony Maryland Hobgood (stage name)', 'parent_type': 'Mother', 'partner_kin_type': '', 'widget': None, 'children': [{'findings_persons_id': 93, 'birth_id': 668, 'order': '2-1', 'gender': 'male', 'birth': '1920', 'sorter': [1920, 0, 0], 'death': '', 'name': 'Ross Aldo Marquis (stage name)', 'id': 5783}], 'marital_events': []}, None: {'sorter': [1925, 0, 0], 'partner_name': 'name unknown', 'parent_type': 'Mother', 'partner_kin_type': '', 'widget': None, 'children': [{'findings_persons_id': 95, 'birth_id': 872, 'order': '1-2', 'gender': 'unknown', 'birth': '1925', 'sorter': [1925, 0, 0], 'death': '', 'name': 'Ulrike Macie Deann Theriault', 'id': 5587}, {'findings_persons_id': 96, 'birth_id': 671, 'order': '2-1', 'gender': 'male', 'birth': 'Sep 30, 1929', 'sorter': [1929, 9, 30], 'death': '', 'name': "Joe-John O'Keefe", 'id': 5732}], 'marital_events': []}}
line 646 self.current_person_parents: [(11, 128), {'id': 5564, 'name': 'Phoebe Tellhouse', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.ma>}, {'id': 5557, 'name': 'Russell Adcock', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.pa>}]
line 647 self.current_person_alt_parents: [[[114, 1070, ['foster father', 'foster mother']], {'id': 5806, 'name': 'Lucien Patrick Mejia', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_l0>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label5>}, {'id': 5805, 'name': 'Erlinda Rickard', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_r0>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label6>}], [[113, 1069, ['adoptive father', 'adoptive mother']], {'id': 5807, 'name': 'Asa Jaime Legault', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_l1>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label7>}, {'id': 5808, 'name': 'Mary Hilton Summer', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.altparent_r1>, 'label': <widgets.Label object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!labelframe.!label8>}]]
line 648 self.progeny_dicts: {6: {'sorter': [1905, 0, 0], 'partner_name': 'Ronnie Webb', 'parent_type': '', 'partner_kin_type': 'wife', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame4.pard_6_1>, 'children': [], 'marital_events': [{'findings_persons_id': 72, 'finding': 646}, {'findings_persons_id': 73, 'finding': 649}]}, 5599: {'sorter': [1910, 8, 15], 'partner_name': 'Selina Savoy', 'parent_type': '', 'partner_kin_type': 'wife', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame6.pard_5599_3>, 'children': [], 'marital_events': [{'findings_persons_id': 69, 'finding': 632}]}, 5635: {'sorter': [1920, 0, 0], 'partner_name': 'Harmony Maryland Hobgood (stage name)', 'parent_type': 'Mother', 'partner_kin_type': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame8.pard_5635_5>, 'children': [{'findings_persons_id': 93, 'birth_id': 668, 'order': '2-1', 'gender': 'male', 'birth': '1920', 'sorter': [1920, 0, 0], 'death': '', 'name': 'Ross Aldo Marquis (stage name)', 'id': 5783, 'name_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame9.!entryauto>, 'gender_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame9.!entryauto2>, 'birth_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame9.!entryauto3>, 'death_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame9.!entryauto4>}], 'marital_events': []}, None: {'sorter': [1925, 0, 0], 'partner_name': 'name unknown', 'parent_type': 'Mother', 'partner_kin_type': '', 'widget': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame10.pard_None_7>, 'children': [{'findings_persons_id': 95, 'birth_id': 872, 'order': '1-2', 'gender': 'unknown', 'birth': '1925', 'sorter': [1925, 0, 0], 'death': '', 'name': 'Ulrike Macie Deann Theriault', 'id': 5587, 'name_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto>, 'gender_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto2>, 'birth_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto3>, 'death_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto4>}, {'findings_persons_id': 96, 'birth_id': 671, 'order': '2-1', 'gender': 'male', 'birth': 'Sep 30, 1929', 'sorter': [1929, 9, 30], 'death': '', 'name': "Joe-John O'Keefe", 'id': 5732, 'name_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto5>, 'gender_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto6>, 'birth_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto7>, 'death_widg': <autofill.EntryAuto object .!border.!main.!tabbook.!framehilited2.!frame.!frame.!frame.!nuclearfamiliestable.!canvas.!frame.!frame11.!entryauto8>}], 'marital_events': []}}